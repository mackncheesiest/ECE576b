-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity activity_kernel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    len : IN STD_LOGIC_VECTOR (31 downto 0);
    hr : IN STD_LOGIC_VECTOR (63 downto 0);
    t : IN STD_LOGIC_VECTOR (63 downto 0);
    meanhr : OUT STD_LOGIC_VECTOR (63 downto 0);
    meanhr_ap_vld : OUT STD_LOGIC;
    tpower : OUT STD_LOGIC_VECTOR (63 downto 0);
    tpower_ap_vld : OUT STD_LOGIC;
    stationarity : OUT STD_LOGIC_VECTOR (63 downto 0);
    stationarity_ap_vld : OUT STD_LOGIC;
    activity : OUT STD_LOGIC_VECTOR (63 downto 0);
    activity_ap_vld : OUT STD_LOGIC;
    acmin_i : IN STD_LOGIC_VECTOR (63 downto 0);
    acmin_o : OUT STD_LOGIC_VECTOR (63 downto 0);
    acmin_o_ap_vld : OUT STD_LOGIC;
    hrmin : OUT STD_LOGIC_VECTOR (63 downto 0);
    hrmin_ap_vld : OUT STD_LOGIC;
    stmin : OUT STD_LOGIC_VECTOR (63 downto 0);
    stmin_ap_vld : OUT STD_LOGIC;
    tpmin : OUT STD_LOGIC_VECTOR (63 downto 0);
    tpmin_ap_vld : OUT STD_LOGIC;
    tmin0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    tmin0_ap_vld : OUT STD_LOGIC;
    tmin1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    tmin1_ap_vld : OUT STD_LOGIC );
end;


architecture behav of activity_kernel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "activity_kernel_activity_kernel,hls_ip_2020_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z100i-ffv900-2L,HLS_INPUT_CLOCK=60.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=59.969000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=3090,HLS_SYN_LUT=6783,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000010";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000100";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000001000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000010000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000100000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000001000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000010000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000100000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000001000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000010000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000100000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000001000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000010000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000100000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000001000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000010000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000100000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000001000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000010000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000100000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000001000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000010000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000100000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000001000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000010000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000100000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (36 downto 0) := "0000000001000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (36 downto 0) := "0000000010000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (36 downto 0) := "0000000100000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (36 downto 0) := "0000001000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (36 downto 0) := "0000010000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (36 downto 0) := "0000100000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (36 downto 0) := "0001000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (36 downto 0) := "0010000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (36 downto 0) := "0100000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (36 downto 0) := "1000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv64_4039000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000000111001000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_C044000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1100000001000100000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv64_3FE0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111100000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_4024000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000000100100000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_4059000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000001011001000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_8000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_reg_206 : STD_LOGIC_VECTOR (31 downto 0);
    signal meanhr0_reg_217 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_reg_253 : STD_LOGIC_VECTOR (63 downto 0);
    signal meanhr1_reg_262 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_reg_274 : STD_LOGIC_VECTOR (30 downto 0);
    signal empty_reg_285 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_310_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_372 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_state6_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln15_reg_895 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal grp_fu_364_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_382 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_fu_340_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_388 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_fu_323_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_395 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal div_fu_450_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal div_reg_838 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln11_fu_468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_reg_846 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln12_fu_474_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln12_reg_855 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln11_fu_478_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln11_reg_860 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln11_1_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_1_reg_865 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_1_reg_865_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_494_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal sext_ln15_fu_501_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal wide_trip_count21_fu_505_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal wide_trip_count21_reg_884 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln16_fu_508_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln16_reg_889 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln15_fu_511_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln15_fu_516_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal grp_fu_345_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal meanhr1_2_reg_904 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln24_fu_574_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln24_reg_910 : STD_LOGIC_VECTOR (63 downto 0);
    signal div2_reg_917 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal bitcast_ln21_fu_582_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln21_reg_924 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln22_fu_587_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln22_reg_931 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln28_fu_591_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_936 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln29_fu_596_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln29_reg_940 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln28_fu_599_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln28_reg_946 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_block_state21_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state22_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state23_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln28_1_fu_605_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_1_reg_951 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_1_reg_951_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_615_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal select_ln35_1_fu_674_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln35_1_reg_965 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_333_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_367_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_976 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal grp_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_982 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state6 : STD_LOGIC;
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state21 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_phi_mux_i_phi_fu_210_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal meanhr0_0_lcssa_reg_229 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_i_1_phi_fu_246_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_reg_242 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_meanhr1_phi_fu_266_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_i_3_phi_fu_278_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal empty_12_reg_297 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal bitcast_ln39_fu_726_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal or_ln46_fu_820_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_310_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_310_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal grp_fu_323_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_323_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_340_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal grp_fu_351_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_315_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln41_fu_718_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_351_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln46_fu_732_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_359_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_364_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal tmp_10_fu_402_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_neg_fu_410_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_neg_fu_410_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_lshr_fu_416_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_lshr_cast_fu_426_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_lshr_f_fu_436_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_lshr_f_fu_436_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_10_fu_402_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_neg_t_fu_430_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_lshr_f_cast_fu_446_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_458_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_458_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_494_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal wide_trip_count21_fu_505_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln24_fu_522_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_526_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln24_fu_536_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln24_1_fu_546_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_fu_540_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln24_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln25_fu_564_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln24_fu_558_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln25_fu_570_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln28_fu_591_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln29_fu_596_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_615_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln33_fu_623_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_627_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln35_fu_637_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln35_1_fu_647_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_fu_641_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln35_fu_653_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_fu_659_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_683_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln41_fu_692_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln41_1_fu_701_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_fu_695_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln41_fu_707_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln41_fu_713_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_738_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln46_fu_748_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln46_1_fu_772_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_fu_766_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_752_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln46_1_fu_762_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln46_3_fu_790_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_2_fu_784_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln46_1_fu_778_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln46_2_fu_796_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_fu_802_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_1_fu_808_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_2_fu_814_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_310_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp1_stage0_00001 : BOOLEAN;
    signal grp_fu_351_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_494_in_valid : STD_LOGIC;
    signal grp_fu_615_in_valid : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (36 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal grp_fu_494_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_615_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component activity_kernel_dadddsub_64ns_64ns_64_2_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component activity_kernel_dsub_64ns_64ns_64_2_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component activity_kernel_dmul_64ns_64ns_64_2_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component activity_kernel_ddiv_64ns_64ns_64_6_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component activity_kernel_dcmp_64ns_64ns_1_1_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component activity_kernel_sitodp_32ns_64_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component activity_kernel_dsqrt_64ns_64ns_64_6_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component activity_kernel_dacc_64ns_64ns_1ns_64_3_no_dsp_1 IS
    generic (
        DWIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        ce : IN STD_LOGIC;
        in_data : IN STD_LOGIC_VECTOR (63 downto 0);
        in_last : IN STD_LOGIC_VECTOR (0 downto 0);
        in_valid : IN STD_LOGIC;
        out_data : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    dadddsub_64ns_64ns_64_2_full_dsp_1_U1 : component activity_kernel_dadddsub_64ns_64ns_64_2_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_310_p0,
        din1 => grp_fu_310_p1,
        opcode => grp_fu_310_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_310_p2);

    dsub_64ns_64ns_64_2_full_dsp_1_U2 : component activity_kernel_dsub_64ns_64ns_64_2_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_388,
        din1 => meanhr1_2_reg_904,
        ce => ap_const_logic_1,
        dout => grp_fu_315_p2);

    dmul_64ns_64ns_64_2_max_dsp_1_U3 : component activity_kernel_dmul_64ns_64ns_64_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_323_p0,
        din1 => grp_fu_323_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_323_p2);

    dmul_64ns_64ns_64_2_max_dsp_1_U4 : component activity_kernel_dmul_64ns_64ns_64_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_323_p2,
        din1 => select_ln24_reg_910,
        ce => ap_const_logic_1,
        dout => grp_fu_333_p2);

    ddiv_64ns_64ns_64_6_no_dsp_1_U5 : component activity_kernel_ddiv_64ns_64ns_64_6_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_340_p0,
        din1 => reg_382,
        ce => ap_const_logic_1,
        dout => grp_fu_340_p2);

    ddiv_64ns_64ns_64_6_no_dsp_1_U6 : component activity_kernel_ddiv_64ns_64ns_64_6_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => meanhr1_reg_262,
        din1 => reg_382,
        ce => ap_const_logic_1,
        dout => grp_fu_345_p2);

    dcmp_64ns_64ns_1_1_no_dsp_1_U7 : component activity_kernel_dcmp_64ns_64ns_1_1_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_351_p0,
        din1 => grp_fu_351_p1,
        opcode => grp_fu_351_opcode,
        dout => grp_fu_351_p2);

    dcmp_64ns_64ns_1_1_no_dsp_1_U8 : component activity_kernel_dcmp_64ns_64ns_1_1_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        din0 => tmp_s_fu_359_p0,
        din1 => ap_const_lv64_0,
        opcode => ap_const_lv5_4,
        dout => tmp_s_fu_359_p2);

    sitodp_32ns_64_2_no_dsp_1_U9 : component activity_kernel_sitodp_32ns_64_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_364_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_364_p1);

    dsqrt_64ns_64ns_64_6_no_dsp_1_U10 : component activity_kernel_dsqrt_64ns_64ns_64_6_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv64_0,
        din1 => reg_372,
        ce => ap_const_logic_1,
        dout => grp_fu_367_p2);

    dacc_64ns_64ns_1ns_64_3_no_dsp_1_U11 : component activity_kernel_dacc_64ns_64ns_1ns_64_3_no_dsp_1
    generic map (
        DWIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        ce => ap_const_logic_1,
        in_data => bitcast_ln12_reg_855,
        in_last => grp_fu_494_p2,
        in_valid => grp_fu_494_in_valid,
        out_data => grp_fu_494_p3);

    dacc_64ns_64ns_1ns_64_3_no_dsp_1_U12 : component activity_kernel_dacc_64ns_64ns_1ns_64_3_no_dsp_1
    generic map (
        DWIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        ce => ap_const_logic_1,
        in_data => reg_395,
        in_last => grp_fu_615_p2,
        in_valid => grp_fu_615_in_valid,
        out_data => grp_fu_615_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln11_fu_468_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln11_fu_468_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state6) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state6) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state6);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state21) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state21)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state21);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    empty_12_reg_297_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln28_reg_936 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                empty_12_reg_297 <= empty_reg_285;
            elsif (((icmp_ln28_fu_591_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                empty_12_reg_297 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    empty_reg_285_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                empty_reg_285 <= ap_const_lv64_0;
            elsif (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (icmp_ln28_1_reg_951_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                empty_reg_285 <= grp_fu_615_p3;
            end if; 
        end if;
    end process;

    i_1_reg_242_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln11_reg_846 = ap_const_lv1_1))) then 
                i_1_reg_242 <= div_reg_838;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln11_fu_468_p2 = ap_const_lv1_0))) then 
                i_1_reg_242 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_2_reg_253_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_2_reg_253 <= sext_ln15_fu_501_p1;
            elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln15_fu_511_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                i_2_reg_253 <= add_ln15_fu_516_p2;
            end if; 
        end if;
    end process;

    i_3_reg_274_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                i_3_reg_274 <= ap_const_lv31_0;
            elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln28_1_reg_951 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                i_3_reg_274 <= add_ln28_reg_946;
            end if; 
        end if;
    end process;

    i_reg_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln11_fu_468_p2 = ap_const_lv1_1))) then 
                i_reg_206 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln11_1_reg_865 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_reg_206 <= add_ln11_reg_860;
            end if; 
        end if;
    end process;

    meanhr0_0_lcssa_reg_229_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln11_reg_846 = ap_const_lv1_1))) then 
                meanhr0_0_lcssa_reg_229 <= meanhr0_reg_217;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln11_fu_468_p2 = ap_const_lv1_0))) then 
                meanhr0_0_lcssa_reg_229 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    meanhr0_reg_217_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln11_fu_468_p2 = ap_const_lv1_1))) then 
                meanhr0_reg_217 <= ap_const_lv64_0;
            elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln11_1_reg_865_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                meanhr0_reg_217 <= grp_fu_494_p3;
            end if; 
        end if;
    end process;

    meanhr1_reg_262_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                meanhr1_reg_262 <= ap_const_lv64_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln15_reg_895 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
                meanhr1_reg_262 <= grp_fu_310_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln11_reg_860 <= add_ln11_fu_478_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                add_ln28_reg_946 <= add_ln28_fu_599_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln11_fu_468_p2 = ap_const_lv1_1))) then
                bitcast_ln12_reg_855 <= bitcast_ln12_fu_474_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                bitcast_ln16_reg_889 <= bitcast_ln16_fu_508_p1;
                wide_trip_count21_reg_884 <= wide_trip_count21_fu_505_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                bitcast_ln21_reg_924 <= bitcast_ln21_fu_582_p1;
                bitcast_ln22_reg_931 <= bitcast_ln22_fu_587_p1;
                div2_reg_917 <= grp_fu_323_p2;
                icmp_ln28_reg_936 <= icmp_ln28_fu_591_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                div_reg_838 <= div_fu_450_p3;
                icmp_ln11_reg_846 <= icmp_ln11_fu_468_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln11_1_reg_865 <= icmp_ln11_1_fu_484_p2;
                icmp_ln11_1_reg_865_pp0_iter1_reg <= icmp_ln11_1_reg_865;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln15_reg_895 <= icmp_ln15_fu_511_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln28_1_reg_951 <= icmp_ln28_1_fu_605_p2;
                icmp_ln28_1_reg_951_pp2_iter1_reg <= icmp_ln28_1_reg_951;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                meanhr1_2_reg_904 <= grp_fu_345_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln15_reg_895 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)))) then
                reg_372 <= grp_fu_310_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state9))) then
                reg_382 <= grp_fu_364_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state31))) then
                reg_388 <= grp_fu_340_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state31))) then
                reg_395 <= grp_fu_323_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                select_ln24_reg_910 <= select_ln24_fu_574_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                select_ln35_1_reg_965 <= select_ln35_1_fu_674_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                tmp_6_reg_982 <= grp_fu_351_p2;
                tmp_reg_976 <= grp_fu_367_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                trunc_ln29_reg_940 <= trunc_ln29_fu_596_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln11_fu_468_p2, ap_enable_reg_pp0_iter0, icmp_ln11_1_fu_484_p2, ap_enable_reg_pp0_iter2, icmp_ln15_fu_511_p2, ap_enable_reg_pp1_iter0, ap_CS_fsm_state18, icmp_ln28_fu_591_p2, ap_enable_reg_pp2_iter0, icmp_ln28_1_fu_605_p2, ap_enable_reg_pp2_iter2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_pp1_stage0_subdone, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln11_fu_468_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln11_fu_468_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln11_1_fu_484_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln11_1_fu_484_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln15_fu_511_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln15_fu_511_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((icmp_ln28_fu_591_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (icmp_ln28_1_fu_605_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) and not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (icmp_ln28_1_fu_605_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    acmin_o_assign_proc : process(acmin_i, bitcast_ln39_fu_726_p1, ap_CS_fsm_state42, or_ln46_fu_820_p2)
    begin
        if (((or_ln46_fu_820_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            acmin_o <= bitcast_ln39_fu_726_p1;
        else 
            acmin_o <= acmin_i;
        end if; 
    end process;


    acmin_o_ap_vld_assign_proc : process(ap_CS_fsm_state42, or_ln46_fu_820_p2)
    begin
        if (((or_ln46_fu_820_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            acmin_o_ap_vld <= ap_const_logic_1;
        else 
            acmin_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    activity <= bitcast_ln39_fu_726_p1;

    activity_ap_vld_assign_proc : process(ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            activity_ap_vld <= ap_const_logic_1;
        else 
            activity_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln11_fu_478_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_phi_fu_210_p4) + unsigned(ap_const_lv32_1));
    add_ln15_fu_516_p2 <= std_logic_vector(unsigned(i_2_reg_253) + unsigned(ap_const_lv64_1));
    add_ln28_fu_599_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_3_phi_fu_278_p4) + unsigned(ap_const_lv31_1));
    and_ln24_fu_558_p2 <= (or_ln24_fu_552_p2 and grp_fu_351_p2);
    and_ln35_fu_659_p2 <= (or_ln35_fu_653_p2 and grp_fu_351_p2);
    and_ln41_fu_713_p2 <= (tmp_6_reg_982 and or_ln41_fu_707_p2);
    and_ln46_1_fu_808_p2 <= (grp_fu_351_p2 and and_ln46_fu_802_p2);
    and_ln46_2_fu_814_p2 <= (tmp_s_fu_359_p2 and or_ln46_2_fu_796_p2);
    and_ln46_fu_802_p2 <= (or_ln46_2_fu_796_p2 and or_ln46_1_fu_778_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(17);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(6);
    ap_CS_fsm_state15 <= ap_CS_fsm(11);
    ap_CS_fsm_state16 <= ap_CS_fsm(12);
    ap_CS_fsm_state17 <= ap_CS_fsm(13);
    ap_CS_fsm_state18 <= ap_CS_fsm(14);
    ap_CS_fsm_state19 <= ap_CS_fsm(15);
    ap_CS_fsm_state20 <= ap_CS_fsm(16);
    ap_CS_fsm_state24 <= ap_CS_fsm(18);
    ap_CS_fsm_state25 <= ap_CS_fsm(19);
    ap_CS_fsm_state26 <= ap_CS_fsm(20);
    ap_CS_fsm_state30 <= ap_CS_fsm(24);
    ap_CS_fsm_state31 <= ap_CS_fsm(25);
    ap_CS_fsm_state32 <= ap_CS_fsm(26);
    ap_CS_fsm_state33 <= ap_CS_fsm(27);
    ap_CS_fsm_state34 <= ap_CS_fsm(28);
    ap_CS_fsm_state35 <= ap_CS_fsm(29);
    ap_CS_fsm_state40 <= ap_CS_fsm(34);
    ap_CS_fsm_state41 <= ap_CS_fsm(35);
    ap_CS_fsm_state42 <= ap_CS_fsm(36);
    ap_CS_fsm_state5 <= ap_CS_fsm(2);
    ap_CS_fsm_state8 <= ap_CS_fsm(4);
    ap_CS_fsm_state9 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln11_1_fu_484_p2)
    begin
        if ((icmp_ln11_1_fu_484_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state6_assign_proc : process(icmp_ln15_fu_511_p2)
    begin
        if ((icmp_ln15_fu_511_p2 = ap_const_lv1_0)) then 
            ap_condition_pp1_exit_iter0_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state21_assign_proc : process(icmp_ln28_1_fu_605_p2)
    begin
        if ((icmp_ln28_1_fu_605_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state21 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state21 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_1_phi_fu_246_p4_assign_proc : process(div_reg_838, icmp_ln11_reg_846, ap_CS_fsm_state5, i_1_reg_242)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln11_reg_846 = ap_const_lv1_1))) then 
            ap_phi_mux_i_1_phi_fu_246_p4 <= div_reg_838;
        else 
            ap_phi_mux_i_1_phi_fu_246_p4 <= i_1_reg_242;
        end if; 
    end process;


    ap_phi_mux_i_3_phi_fu_278_p4_assign_proc : process(i_3_reg_274, add_ln28_reg_946, ap_CS_fsm_pp2_stage0, icmp_ln28_1_reg_951, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln28_1_reg_951 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            ap_phi_mux_i_3_phi_fu_278_p4 <= add_ln28_reg_946;
        else 
            ap_phi_mux_i_3_phi_fu_278_p4 <= i_3_reg_274;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_210_p4_assign_proc : process(i_reg_206, add_ln11_reg_860, ap_CS_fsm_pp0_stage0, icmp_ln11_1_reg_865, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln11_1_reg_865 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_i_phi_fu_210_p4 <= add_ln11_reg_860;
        else 
            ap_phi_mux_i_phi_fu_210_p4 <= i_reg_206;
        end if; 
    end process;


    ap_phi_mux_meanhr1_phi_fu_266_p4_assign_proc : process(meanhr1_reg_262, grp_fu_310_p2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln15_reg_895, ap_block_pp1_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln15_reg_895 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_meanhr1_phi_fu_266_p4 <= grp_fu_310_p2;
        else 
            ap_phi_mux_meanhr1_phi_fu_266_p4 <= meanhr1_reg_262;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln12_fu_474_p1 <= hr;
    bitcast_ln16_fu_508_p1 <= hr;
    bitcast_ln21_fu_582_p1 <= grp_fu_323_p2;
    bitcast_ln22_fu_587_p1 <= select_ln24_reg_910;
    bitcast_ln24_fu_522_p1 <= grp_fu_315_p2;
    bitcast_ln25_fu_570_p1 <= xor_ln25_fu_564_p2;
    bitcast_ln33_fu_623_p1 <= reg_388;
    bitcast_ln39_fu_726_p1 <= select_ln41_fu_718_p3;
    bitcast_ln46_fu_732_p1 <= acmin_i;
    div_fu_450_p3 <= 
        p_neg_t_fu_430_p2 when (tmp_10_fu_402_p3(0) = '1') else 
        p_lshr_f_cast_fu_446_p1;

    grp_fu_310_opcode_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_CS_fsm_state33, ap_CS_fsm_state41, ap_CS_fsm_state32, icmp_ln15_fu_511_p2, ap_enable_reg_pp1_iter0, ap_CS_fsm_state18, icmp_ln28_fu_591_p2, ap_CS_fsm_state40, ap_CS_fsm_state16, ap_CS_fsm_state30, ap_block_pp1_stage0_00001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or ((icmp_ln28_fu_591_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            grp_fu_310_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state33) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln15_fu_511_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_00001)))) then 
            grp_fu_310_opcode <= ap_const_lv2_0;
        else 
            grp_fu_310_opcode <= "XX";
        end if; 
    end process;


    grp_fu_310_p0_assign_proc : process(grp_fu_310_p2, ap_CS_fsm_pp1_stage0, ap_CS_fsm_state33, ap_CS_fsm_state41, reg_388, grp_fu_323_p2, ap_CS_fsm_state32, bitcast_ln16_reg_889, ap_enable_reg_pp1_iter0, div2_reg_917, ap_CS_fsm_state18, tmp_reg_976, ap_CS_fsm_state40, ap_phi_mux_meanhr1_phi_fu_266_p4, ap_block_pp1_stage0, ap_CS_fsm_state16, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_fu_310_p0 <= tmp_reg_976;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            grp_fu_310_p0 <= ap_const_lv64_4039000000000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fu_310_p0 <= grp_fu_310_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_310_p0 <= grp_fu_323_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_fu_310_p0 <= div2_reg_917;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_310_p0 <= bitcast_ln16_reg_889;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_310_p0 <= reg_388;
        elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            grp_fu_310_p0 <= ap_phi_mux_meanhr1_phi_fu_266_p4;
        else 
            grp_fu_310_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_310_p1_assign_proc : process(grp_fu_310_p2, ap_CS_fsm_pp1_stage0, ap_CS_fsm_state33, ap_CS_fsm_state41, grp_fu_323_p2, ap_CS_fsm_state32, bitcast_ln16_reg_889, ap_enable_reg_pp1_iter0, meanhr1_2_reg_904, div2_reg_917, ap_CS_fsm_state18, grp_fu_333_p2, ap_CS_fsm_state40, ap_block_pp1_stage0, ap_CS_fsm_state16, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_fu_310_p1 <= grp_fu_310_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            grp_fu_310_p1 <= div2_reg_917;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_310_p1 <= grp_fu_333_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_fu_310_p1 <= ap_const_lv64_C044000000000000;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            grp_fu_310_p1 <= grp_fu_323_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_310_p1 <= meanhr1_2_reg_904;
        elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            grp_fu_310_p1 <= bitcast_ln16_reg_889;
        else 
            grp_fu_310_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_323_p0_assign_proc : process(grp_fu_310_p2, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state31, ap_CS_fsm_state32, select_ln24_reg_910, select_ln35_1_fu_674_p3, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_323_p0 <= select_ln35_1_fu_674_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_fu_323_p0 <= select_ln24_reg_910;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            grp_fu_323_p0 <= grp_fu_310_p2;
        else 
            grp_fu_323_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_323_p1_assign_proc : process(grp_fu_310_p2, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_323_p1 <= ap_const_lv64_4059000000000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_fu_323_p1 <= ap_const_lv64_4024000000000000;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            grp_fu_323_p1 <= grp_fu_310_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_323_p1 <= ap_const_lv64_3FE0000000000000;
        else 
            grp_fu_323_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_340_p0_assign_proc : process(meanhr0_0_lcssa_reg_229, empty_12_reg_297, ap_CS_fsm_state10, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_fu_340_p0 <= empty_12_reg_297;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_340_p0 <= meanhr0_0_lcssa_reg_229;
        else 
            grp_fu_340_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_351_opcode_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state32, ap_CS_fsm_state40, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_351_opcode <= ap_const_lv5_2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            grp_fu_351_opcode <= ap_const_lv5_4;
        else 
            grp_fu_351_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_351_p0_assign_proc : process(ap_CS_fsm_state17, reg_388, ap_CS_fsm_state32, div2_reg_917, ap_CS_fsm_state40, ap_CS_fsm_state42, grp_fu_315_p2, select_ln41_fu_718_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_351_p0 <= select_ln41_fu_718_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            grp_fu_351_p0 <= div2_reg_917;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_351_p0 <= reg_388;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_351_p0 <= grp_fu_315_p2;
        else 
            grp_fu_351_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_351_p1_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state32, ap_CS_fsm_state40, ap_CS_fsm_state42, bitcast_ln46_fu_732_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_351_p1 <= bitcast_ln46_fu_732_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            grp_fu_351_p1 <= ap_const_lv64_4039000000000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_351_p1 <= ap_const_lv64_4059000000000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_351_p1 <= ap_const_lv64_0;
        else 
            grp_fu_351_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_364_p0_assign_proc : process(len, div_reg_838, ap_CS_fsm_state24, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_364_p0 <= len;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_364_p0 <= div_reg_838;
        else 
            grp_fu_364_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_494_in_valid_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln11_1_fu_484_p2, ap_block_pp0_stage0)
    begin
        if (((icmp_ln11_1_fu_484_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_494_in_valid <= ap_const_logic_1;
        else 
            grp_fu_494_in_valid <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_494_p2 <= "1" when (add_ln11_fu_478_p2 = div_reg_838) else "0";

    grp_fu_615_in_valid_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, icmp_ln28_1_fu_605_p2, ap_block_pp2_stage0)
    begin
        if (((icmp_ln28_1_fu_605_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            grp_fu_615_in_valid <= ap_const_logic_1;
        else 
            grp_fu_615_in_valid <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_615_p2 <= "1" when (add_ln28_fu_599_p2 = trunc_ln29_reg_940) else "0";
    hrmin <= bitcast_ln21_reg_924;

    hrmin_ap_vld_assign_proc : process(ap_CS_fsm_state42, or_ln46_fu_820_p2)
    begin
        if (((or_ln46_fu_820_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            hrmin_ap_vld <= ap_const_logic_1;
        else 
            hrmin_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln11_1_fu_484_p2 <= "1" when (ap_phi_mux_i_phi_fu_210_p4 = div_reg_838) else "0";
    icmp_ln11_fu_468_p2 <= "1" when (signed(tmp_11_fu_458_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln15_fu_511_p2 <= "1" when (signed(i_2_reg_253) < signed(wide_trip_count21_reg_884)) else "0";
    icmp_ln24_1_fu_546_p2 <= "1" when (trunc_ln24_fu_536_p1 = ap_const_lv52_0) else "0";
    icmp_ln24_fu_540_p2 <= "0" when (tmp_1_fu_526_p4 = ap_const_lv11_7FF) else "1";
    icmp_ln28_1_fu_605_p2 <= "1" when (ap_phi_mux_i_3_phi_fu_278_p4 = trunc_ln29_reg_940) else "0";
    icmp_ln28_fu_591_p0 <= len;
    icmp_ln28_fu_591_p2 <= "1" when (signed(icmp_ln28_fu_591_p0) > signed(ap_const_lv32_0)) else "0";
    icmp_ln35_1_fu_647_p2 <= "1" when (trunc_ln35_fu_637_p1 = ap_const_lv52_0) else "0";
    icmp_ln35_fu_641_p2 <= "0" when (tmp_3_fu_627_p4 = ap_const_lv11_7FF) else "1";
    icmp_ln41_1_fu_701_p2 <= "1" when (trunc_ln41_fu_692_p1 = ap_const_lv52_0) else "0";
    icmp_ln41_fu_695_p2 <= "0" when (tmp_5_fu_683_p4 = ap_const_lv11_7FF) else "1";
    icmp_ln46_1_fu_772_p2 <= "1" when (trunc_ln46_fu_748_p1 = ap_const_lv52_0) else "0";
    icmp_ln46_2_fu_784_p2 <= "0" when (tmp_8_fu_752_p4 = ap_const_lv11_7FF) else "1";
    icmp_ln46_3_fu_790_p2 <= "1" when (trunc_ln46_1_fu_762_p1 = ap_const_lv52_0) else "0";
    icmp_ln46_fu_766_p2 <= "0" when (tmp_7_fu_738_p4 = ap_const_lv11_7FF) else "1";
    meanhr <= grp_fu_323_p2;

    meanhr_ap_vld_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            meanhr_ap_vld <= ap_const_logic_1;
        else 
            meanhr_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    or_ln24_fu_552_p2 <= (icmp_ln24_fu_540_p2 or icmp_ln24_1_fu_546_p2);
    or_ln35_fu_653_p2 <= (icmp_ln35_fu_641_p2 or icmp_ln35_1_fu_647_p2);
    or_ln41_fu_707_p2 <= (icmp_ln41_fu_695_p2 or icmp_ln41_1_fu_701_p2);
    or_ln46_1_fu_778_p2 <= (icmp_ln46_fu_766_p2 or icmp_ln46_1_fu_772_p2);
    or_ln46_2_fu_796_p2 <= (icmp_ln46_3_fu_790_p2 or icmp_ln46_2_fu_784_p2);
    or_ln46_fu_820_p2 <= (and_ln46_2_fu_814_p2 or and_ln46_1_fu_808_p2);
    p_lshr_cast_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_lshr_fu_416_p4),32));
    p_lshr_f_cast_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_lshr_f_fu_436_p4),32));
    p_lshr_f_fu_436_p1 <= len;
    p_lshr_f_fu_436_p4 <= p_lshr_f_fu_436_p1(31 downto 1);
    p_lshr_fu_416_p4 <= p_neg_fu_410_p2(31 downto 1);
    p_neg_fu_410_p1 <= len;
    p_neg_fu_410_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_neg_fu_410_p1));
    p_neg_t_fu_430_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_lshr_cast_fu_426_p1));
    select_ln24_fu_574_p3 <= 
        bitcast_ln25_fu_570_p1 when (and_ln24_fu_558_p2(0) = '1') else 
        grp_fu_315_p2;
    select_ln35_1_fu_674_p3 <= 
        ap_const_lv64_4059000000000000 when (and_ln35_fu_659_p2(0) = '1') else 
        reg_388;
    select_ln41_fu_718_p3 <= 
        grp_fu_310_p2 when (and_ln41_fu_713_p2(0) = '1') else 
        tmp_reg_976;
        sext_ln15_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_phi_mux_i_1_phi_fu_246_p4),64));

    stationarity <= select_ln24_reg_910;

    stationarity_ap_vld_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            stationarity_ap_vld <= ap_const_logic_1;
        else 
            stationarity_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    stmin <= bitcast_ln22_reg_931;

    stmin_ap_vld_assign_proc : process(ap_CS_fsm_state42, or_ln46_fu_820_p2)
    begin
        if (((or_ln46_fu_820_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            stmin_ap_vld <= ap_const_logic_1;
        else 
            stmin_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmin0 <= t;

    tmin0_ap_vld_assign_proc : process(ap_CS_fsm_state42, or_ln46_fu_820_p2)
    begin
        if (((or_ln46_fu_820_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            tmin0_ap_vld <= ap_const_logic_1;
        else 
            tmin0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmin1 <= t;

    tmin1_ap_vld_assign_proc : process(ap_CS_fsm_state42, or_ln46_fu_820_p2)
    begin
        if (((or_ln46_fu_820_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            tmin1_ap_vld <= ap_const_logic_1;
        else 
            tmin1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_402_p1 <= len;
    tmp_10_fu_402_p3 <= tmp_10_fu_402_p1(31 downto 31);
    tmp_11_fu_458_p1 <= len;
    tmp_11_fu_458_p4 <= tmp_11_fu_458_p1(31 downto 1);
    tmp_1_fu_526_p4 <= bitcast_ln24_fu_522_p1(62 downto 52);
    tmp_3_fu_627_p4 <= bitcast_ln33_fu_623_p1(62 downto 52);
    tmp_5_fu_683_p4 <= bitcast_ln21_reg_924(62 downto 52);
    tmp_7_fu_738_p4 <= bitcast_ln39_fu_726_p1(62 downto 52);
    tmp_8_fu_752_p4 <= acmin_i(62 downto 52);
    tmp_s_fu_359_p0 <= acmin_i;
    tpmin <= select_ln35_1_reg_965;

    tpmin_ap_vld_assign_proc : process(ap_CS_fsm_state42, or_ln46_fu_820_p2)
    begin
        if (((or_ln46_fu_820_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            tpmin_ap_vld <= ap_const_logic_1;
        else 
            tpmin_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tpower <= 
        ap_const_lv64_4059000000000000 when (and_ln35_fu_659_p2(0) = '1') else 
        bitcast_ln33_fu_623_p1;

    tpower_ap_vld_assign_proc : process(ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            tpower_ap_vld <= ap_const_logic_1;
        else 
            tpower_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln24_fu_536_p1 <= bitcast_ln24_fu_522_p1(52 - 1 downto 0);
    trunc_ln29_fu_596_p0 <= len;
    trunc_ln29_fu_596_p1 <= trunc_ln29_fu_596_p0(31 - 1 downto 0);
    trunc_ln35_fu_637_p1 <= bitcast_ln33_fu_623_p1(52 - 1 downto 0);
    trunc_ln41_fu_692_p1 <= bitcast_ln21_reg_924(52 - 1 downto 0);
    trunc_ln46_1_fu_762_p1 <= acmin_i(52 - 1 downto 0);
    trunc_ln46_fu_748_p1 <= bitcast_ln39_fu_726_p1(52 - 1 downto 0);
    wide_trip_count21_fu_505_p0 <= len;
        wide_trip_count21_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(wide_trip_count21_fu_505_p0),64));

    xor_ln25_fu_564_p2 <= (bitcast_ln24_fu_522_p1 xor ap_const_lv64_8000000000000000);
end behav;
