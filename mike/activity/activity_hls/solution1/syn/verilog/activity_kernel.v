// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="activity_kernel_activity_kernel,hls_ip_2020_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z100i-ffv900-2L,HLS_INPUT_CLOCK=60.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=59.969000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=3090,HLS_SYN_LUT=6783,HLS_VERSION=2020_2}" *)

module activity_kernel (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        len,
        hr,
        t,
        meanhr,
        meanhr_ap_vld,
        tpower,
        tpower_ap_vld,
        stationarity,
        stationarity_ap_vld,
        activity,
        activity_ap_vld,
        acmin_i,
        acmin_o,
        acmin_o_ap_vld,
        hrmin,
        hrmin_ap_vld,
        stmin,
        stmin_ap_vld,
        tpmin,
        tpmin_ap_vld,
        tmin0,
        tmin0_ap_vld,
        tmin1,
        tmin1_ap_vld
);

parameter    ap_ST_fsm_state1 = 37'd1;
parameter    ap_ST_fsm_pp0_stage0 = 37'd2;
parameter    ap_ST_fsm_state5 = 37'd4;
parameter    ap_ST_fsm_pp1_stage0 = 37'd8;
parameter    ap_ST_fsm_state8 = 37'd16;
parameter    ap_ST_fsm_state9 = 37'd32;
parameter    ap_ST_fsm_state10 = 37'd64;
parameter    ap_ST_fsm_state11 = 37'd128;
parameter    ap_ST_fsm_state12 = 37'd256;
parameter    ap_ST_fsm_state13 = 37'd512;
parameter    ap_ST_fsm_state14 = 37'd1024;
parameter    ap_ST_fsm_state15 = 37'd2048;
parameter    ap_ST_fsm_state16 = 37'd4096;
parameter    ap_ST_fsm_state17 = 37'd8192;
parameter    ap_ST_fsm_state18 = 37'd16384;
parameter    ap_ST_fsm_state19 = 37'd32768;
parameter    ap_ST_fsm_state20 = 37'd65536;
parameter    ap_ST_fsm_pp2_stage0 = 37'd131072;
parameter    ap_ST_fsm_state24 = 37'd262144;
parameter    ap_ST_fsm_state25 = 37'd524288;
parameter    ap_ST_fsm_state26 = 37'd1048576;
parameter    ap_ST_fsm_state27 = 37'd2097152;
parameter    ap_ST_fsm_state28 = 37'd4194304;
parameter    ap_ST_fsm_state29 = 37'd8388608;
parameter    ap_ST_fsm_state30 = 37'd16777216;
parameter    ap_ST_fsm_state31 = 37'd33554432;
parameter    ap_ST_fsm_state32 = 37'd67108864;
parameter    ap_ST_fsm_state33 = 37'd134217728;
parameter    ap_ST_fsm_state34 = 37'd268435456;
parameter    ap_ST_fsm_state35 = 37'd536870912;
parameter    ap_ST_fsm_state36 = 37'd1073741824;
parameter    ap_ST_fsm_state37 = 37'd2147483648;
parameter    ap_ST_fsm_state38 = 37'd4294967296;
parameter    ap_ST_fsm_state39 = 37'd8589934592;
parameter    ap_ST_fsm_state40 = 37'd17179869184;
parameter    ap_ST_fsm_state41 = 37'd34359738368;
parameter    ap_ST_fsm_state42 = 37'd68719476736;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] len;
input  [63:0] hr;
input  [63:0] t;
output  [63:0] meanhr;
output   meanhr_ap_vld;
output  [63:0] tpower;
output   tpower_ap_vld;
output  [63:0] stationarity;
output   stationarity_ap_vld;
output  [63:0] activity;
output   activity_ap_vld;
input  [63:0] acmin_i;
output  [63:0] acmin_o;
output   acmin_o_ap_vld;
output  [63:0] hrmin;
output   hrmin_ap_vld;
output  [63:0] stmin;
output   stmin_ap_vld;
output  [63:0] tpmin;
output   tpmin_ap_vld;
output  [63:0] tmin0;
output   tmin0_ap_vld;
output  [63:0] tmin1;
output   tmin1_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg meanhr_ap_vld;
reg tpower_ap_vld;
reg stationarity_ap_vld;
reg activity_ap_vld;
reg[63:0] acmin_o;
reg acmin_o_ap_vld;
reg hrmin_ap_vld;
reg stmin_ap_vld;
reg tpmin_ap_vld;
reg tmin0_ap_vld;
reg tmin1_ap_vld;

(* fsm_encoding = "none" *) reg   [36:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] i_reg_206;
reg   [63:0] meanhr0_reg_217;
reg   [63:0] i_2_reg_253;
reg   [63:0] meanhr1_reg_262;
reg   [30:0] i_3_reg_274;
reg   [63:0] empty_reg_285;
wire   [63:0] grp_fu_310_p2;
reg   [63:0] reg_372;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_state6_pp1_stage0_iter0;
wire    ap_block_state7_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] icmp_ln15_reg_895;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state41;
wire   [63:0] grp_fu_364_p1;
reg   [63:0] reg_382;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state25;
wire   [63:0] grp_fu_340_p2;
reg   [63:0] reg_388;
wire    ap_CS_fsm_state15;
wire   [63:0] grp_fu_323_p2;
reg   [63:0] reg_395;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state32;
wire   [31:0] div_fu_450_p3;
reg   [31:0] div_reg_838;
wire   [0:0] icmp_ln11_fu_468_p2;
reg   [0:0] icmp_ln11_reg_846;
wire   [63:0] bitcast_ln12_fu_474_p1;
reg   [63:0] bitcast_ln12_reg_855;
wire   [31:0] add_ln11_fu_478_p2;
reg   [31:0] add_ln11_reg_860;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln11_1_fu_484_p2;
reg   [0:0] icmp_ln11_1_reg_865;
reg   [0:0] icmp_ln11_1_reg_865_pp0_iter1_reg;
wire   [63:0] grp_fu_494_p3;
reg    ap_enable_reg_pp0_iter2;
wire  signed [63:0] sext_ln15_fu_501_p1;
wire    ap_CS_fsm_state5;
wire  signed [63:0] wide_trip_count21_fu_505_p1;
reg  signed [63:0] wide_trip_count21_reg_884;
wire   [63:0] bitcast_ln16_fu_508_p1;
reg   [63:0] bitcast_ln16_reg_889;
wire   [0:0] icmp_ln15_fu_511_p2;
wire   [63:0] add_ln15_fu_516_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [63:0] grp_fu_345_p2;
reg   [63:0] meanhr1_2_reg_904;
wire   [63:0] select_ln24_fu_574_p3;
reg   [63:0] select_ln24_reg_910;
reg   [63:0] div2_reg_917;
wire    ap_CS_fsm_state18;
wire   [63:0] bitcast_ln21_fu_582_p1;
reg   [63:0] bitcast_ln21_reg_924;
wire   [63:0] bitcast_ln22_fu_587_p1;
reg   [63:0] bitcast_ln22_reg_931;
wire   [0:0] icmp_ln28_fu_591_p2;
reg   [0:0] icmp_ln28_reg_936;
wire   [30:0] trunc_ln29_fu_596_p1;
reg   [30:0] trunc_ln29_reg_940;
wire   [30:0] add_ln28_fu_599_p2;
reg   [30:0] add_ln28_reg_946;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_state21_pp2_stage0_iter0;
wire    ap_block_state22_pp2_stage0_iter1;
wire    ap_block_state23_pp2_stage0_iter2;
wire    ap_block_pp2_stage0_11001;
wire   [0:0] icmp_ln28_1_fu_605_p2;
reg   [0:0] icmp_ln28_1_reg_951;
reg   [0:0] icmp_ln28_1_reg_951_pp2_iter1_reg;
wire   [63:0] grp_fu_615_p3;
reg    ap_enable_reg_pp2_iter2;
wire   [63:0] select_ln35_1_fu_674_p3;
reg   [63:0] select_ln35_1_reg_965;
wire   [63:0] grp_fu_333_p2;
wire   [63:0] grp_fu_367_p2;
reg   [63:0] tmp_reg_976;
wire    ap_CS_fsm_state40;
wire   [0:0] grp_fu_351_p2;
reg   [0:0] tmp_6_reg_982;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state6;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state21;
reg    ap_enable_reg_pp2_iter1;
reg   [31:0] ap_phi_mux_i_phi_fu_210_p4;
wire    ap_block_pp0_stage0;
reg   [63:0] meanhr0_0_lcssa_reg_229;
reg   [31:0] ap_phi_mux_i_1_phi_fu_246_p4;
reg   [31:0] i_1_reg_242;
reg   [63:0] ap_phi_mux_meanhr1_phi_fu_266_p4;
wire    ap_block_pp1_stage0;
reg   [30:0] ap_phi_mux_i_3_phi_fu_278_p4;
wire    ap_block_pp2_stage0;
reg   [63:0] empty_12_reg_297;
wire    ap_CS_fsm_state24;
wire   [63:0] bitcast_ln39_fu_726_p1;
wire    ap_CS_fsm_state42;
wire   [0:0] or_ln46_fu_820_p2;
reg   [63:0] grp_fu_310_p0;
reg   [63:0] grp_fu_310_p1;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state30;
reg   [63:0] grp_fu_323_p0;
reg   [63:0] grp_fu_323_p1;
reg   [63:0] grp_fu_340_p0;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state26;
reg   [63:0] grp_fu_351_p0;
wire   [63:0] grp_fu_315_p2;
wire   [63:0] select_ln41_fu_718_p3;
reg   [63:0] grp_fu_351_p1;
wire   [63:0] bitcast_ln46_fu_732_p1;
wire   [63:0] tmp_s_fu_359_p0;
reg   [31:0] grp_fu_364_p0;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state35;
wire  signed [31:0] tmp_10_fu_402_p1;
wire  signed [31:0] p_neg_fu_410_p1;
wire   [31:0] p_neg_fu_410_p2;
wire   [30:0] p_lshr_fu_416_p4;
wire   [31:0] p_lshr_cast_fu_426_p1;
wire  signed [31:0] p_lshr_f_fu_436_p1;
wire   [30:0] p_lshr_f_fu_436_p4;
wire   [0:0] tmp_10_fu_402_p3;
wire   [31:0] p_neg_t_fu_430_p2;
wire   [31:0] p_lshr_f_cast_fu_446_p1;
wire  signed [31:0] tmp_11_fu_458_p1;
wire   [30:0] tmp_11_fu_458_p4;
wire   [0:0] grp_fu_494_p2;
wire  signed [31:0] wide_trip_count21_fu_505_p0;
wire   [63:0] bitcast_ln24_fu_522_p1;
wire   [10:0] tmp_1_fu_526_p4;
wire   [51:0] trunc_ln24_fu_536_p1;
wire   [0:0] icmp_ln24_1_fu_546_p2;
wire   [0:0] icmp_ln24_fu_540_p2;
wire   [0:0] or_ln24_fu_552_p2;
wire   [63:0] xor_ln25_fu_564_p2;
wire   [0:0] and_ln24_fu_558_p2;
wire   [63:0] bitcast_ln25_fu_570_p1;
wire  signed [31:0] icmp_ln28_fu_591_p0;
wire  signed [31:0] trunc_ln29_fu_596_p0;
wire   [0:0] grp_fu_615_p2;
wire   [63:0] bitcast_ln33_fu_623_p1;
wire   [10:0] tmp_3_fu_627_p4;
wire   [51:0] trunc_ln35_fu_637_p1;
wire   [0:0] icmp_ln35_1_fu_647_p2;
wire   [0:0] icmp_ln35_fu_641_p2;
wire   [0:0] or_ln35_fu_653_p2;
wire   [0:0] and_ln35_fu_659_p2;
wire   [10:0] tmp_5_fu_683_p4;
wire   [51:0] trunc_ln41_fu_692_p1;
wire   [0:0] icmp_ln41_1_fu_701_p2;
wire   [0:0] icmp_ln41_fu_695_p2;
wire   [0:0] or_ln41_fu_707_p2;
wire   [0:0] and_ln41_fu_713_p2;
wire   [10:0] tmp_7_fu_738_p4;
wire   [51:0] trunc_ln46_fu_748_p1;
wire   [0:0] icmp_ln46_1_fu_772_p2;
wire   [0:0] icmp_ln46_fu_766_p2;
wire   [10:0] tmp_8_fu_752_p4;
wire   [51:0] trunc_ln46_1_fu_762_p1;
wire   [0:0] icmp_ln46_3_fu_790_p2;
wire   [0:0] icmp_ln46_2_fu_784_p2;
wire   [0:0] or_ln46_1_fu_778_p2;
wire   [0:0] or_ln46_2_fu_796_p2;
wire   [0:0] and_ln46_fu_802_p2;
wire   [0:0] tmp_s_fu_359_p2;
wire   [0:0] and_ln46_1_fu_808_p2;
wire   [0:0] and_ln46_2_fu_814_p2;
reg   [1:0] grp_fu_310_opcode;
wire    ap_block_pp1_stage0_00001;
reg   [4:0] grp_fu_351_opcode;
reg    grp_fu_494_in_valid;
reg    grp_fu_615_in_valid;
reg   [36:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
wire   [63:0] grp_fu_494_p0;
wire   [63:0] grp_fu_615_p0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 37'd1;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
end

activity_kernel_dadddsub_64ns_64ns_64_2_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadddsub_64ns_64ns_64_2_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_310_p0),
    .din1(grp_fu_310_p1),
    .opcode(grp_fu_310_opcode),
    .ce(1'b1),
    .dout(grp_fu_310_p2)
);

activity_kernel_dsub_64ns_64ns_64_2_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dsub_64ns_64ns_64_2_full_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_388),
    .din1(meanhr1_2_reg_904),
    .ce(1'b1),
    .dout(grp_fu_315_p2)
);

activity_kernel_dmul_64ns_64ns_64_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_2_max_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_323_p0),
    .din1(grp_fu_323_p1),
    .ce(1'b1),
    .dout(grp_fu_323_p2)
);

activity_kernel_dmul_64ns_64ns_64_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_2_max_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_323_p2),
    .din1(select_ln24_reg_910),
    .ce(1'b1),
    .dout(grp_fu_333_p2)
);

activity_kernel_ddiv_64ns_64ns_64_6_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
ddiv_64ns_64ns_64_6_no_dsp_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_340_p0),
    .din1(reg_382),
    .ce(1'b1),
    .dout(grp_fu_340_p2)
);

activity_kernel_ddiv_64ns_64ns_64_6_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
ddiv_64ns_64ns_64_6_no_dsp_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(meanhr1_reg_262),
    .din1(reg_382),
    .ce(1'b1),
    .dout(grp_fu_345_p2)
);

activity_kernel_dcmp_64ns_64ns_1_1_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
dcmp_64ns_64ns_1_1_no_dsp_1_U7(
    .din0(grp_fu_351_p0),
    .din1(grp_fu_351_p1),
    .opcode(grp_fu_351_opcode),
    .dout(grp_fu_351_p2)
);

activity_kernel_dcmp_64ns_64ns_1_1_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
dcmp_64ns_64ns_1_1_no_dsp_1_U8(
    .din0(tmp_s_fu_359_p0),
    .din1(64'd0),
    .opcode(5'd4),
    .dout(tmp_s_fu_359_p2)
);

activity_kernel_sitodp_32ns_64_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
sitodp_32ns_64_2_no_dsp_1_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_364_p0),
    .ce(1'b1),
    .dout(grp_fu_364_p1)
);

activity_kernel_dsqrt_64ns_64ns_64_6_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dsqrt_64ns_64ns_64_6_no_dsp_1_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd0),
    .din1(reg_372),
    .ce(1'b1),
    .dout(grp_fu_367_p2)
);

activity_kernel_dacc_64ns_64ns_1ns_64_3_no_dsp_1 #(
    .DWIDTH( 64 ))
dacc_64ns_64ns_1ns_64_3_no_dsp_1_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .ce(1'b1),
    .in_data(bitcast_ln12_reg_855),
    .in_last(grp_fu_494_p2),
    .in_valid(grp_fu_494_in_valid),
    .out_data(grp_fu_494_p3)
);

activity_kernel_dacc_64ns_64ns_1ns_64_3_no_dsp_1 #(
    .DWIDTH( 64 ))
dacc_64ns_64ns_1ns_64_3_no_dsp_1_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .ce(1'b1),
    .in_data(reg_395),
    .in_last(grp_fu_615_p2),
    .in_valid(grp_fu_615_in_valid),
    .out_data(grp_fu_615_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln11_fu_468_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln11_fu_468_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state6) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state6) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state6);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp2_exit_iter0_state21) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state21)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state21);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln28_reg_936 == 1'd1) & (1'b1 == ap_CS_fsm_state24))) begin
        empty_12_reg_297 <= empty_reg_285;
    end else if (((icmp_ln28_fu_591_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18))) begin
        empty_12_reg_297 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        empty_reg_285 <= 64'd0;
    end else if (((ap_enable_reg_pp2_iter2 == 1'b1) & (icmp_ln28_1_reg_951_pp2_iter1_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        empty_reg_285 <= grp_fu_615_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln11_reg_846 == 1'd1))) begin
        i_1_reg_242 <= div_reg_838;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln11_fu_468_p2 == 1'd0))) begin
        i_1_reg_242 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_2_reg_253 <= sext_ln15_fu_501_p1;
    end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln15_fu_511_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        i_2_reg_253 <= add_ln15_fu_516_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        i_3_reg_274 <= 31'd0;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln28_1_reg_951 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        i_3_reg_274 <= add_ln28_reg_946;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln11_fu_468_p2 == 1'd1))) begin
        i_reg_206 <= 32'd0;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln11_1_reg_865 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_206 <= add_ln11_reg_860;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln11_reg_846 == 1'd1))) begin
        meanhr0_0_lcssa_reg_229 <= meanhr0_reg_217;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln11_fu_468_p2 == 1'd0))) begin
        meanhr0_0_lcssa_reg_229 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln11_fu_468_p2 == 1'd1))) begin
        meanhr0_reg_217 <= 64'd0;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln11_1_reg_865_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        meanhr0_reg_217 <= grp_fu_494_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        meanhr1_reg_262 <= 64'd0;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln15_reg_895 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        meanhr1_reg_262 <= grp_fu_310_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln11_reg_860 <= add_ln11_fu_478_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        add_ln28_reg_946 <= add_ln28_fu_599_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (icmp_ln11_fu_468_p2 == 1'd1))) begin
        bitcast_ln12_reg_855 <= bitcast_ln12_fu_474_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bitcast_ln16_reg_889 <= bitcast_ln16_fu_508_p1;
        wide_trip_count21_reg_884 <= wide_trip_count21_fu_505_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        bitcast_ln21_reg_924 <= bitcast_ln21_fu_582_p1;
        bitcast_ln22_reg_931 <= bitcast_ln22_fu_587_p1;
        div2_reg_917 <= grp_fu_323_p2;
        icmp_ln28_reg_936 <= icmp_ln28_fu_591_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        div_reg_838 <= div_fu_450_p3;
        icmp_ln11_reg_846 <= icmp_ln11_fu_468_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln11_1_reg_865 <= icmp_ln11_1_fu_484_p2;
        icmp_ln11_1_reg_865_pp0_iter1_reg <= icmp_ln11_1_reg_865;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln15_reg_895 <= icmp_ln15_fu_511_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln28_1_reg_951 <= icmp_ln28_1_fu_605_p2;
        icmp_ln28_1_reg_951_pp2_iter1_reg <= icmp_ln28_1_reg_951;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        meanhr1_2_reg_904 <= grp_fu_345_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln15_reg_895 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1)))) begin
        reg_372 <= grp_fu_310_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state9))) begin
        reg_382 <= grp_fu_364_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state31))) begin
        reg_388 <= grp_fu_340_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state31))) begin
        reg_395 <= grp_fu_323_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        select_ln24_reg_910 <= select_ln24_fu_574_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        select_ln35_1_reg_965 <= select_ln35_1_fu_674_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        tmp_6_reg_982 <= grp_fu_351_p2;
        tmp_reg_976 <= grp_fu_367_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        trunc_ln29_reg_940 <= trunc_ln29_fu_596_p1;
    end
end

always @ (*) begin
    if (((or_ln46_fu_820_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state42))) begin
        acmin_o = bitcast_ln39_fu_726_p1;
    end else begin
        acmin_o = acmin_i;
    end
end

always @ (*) begin
    if (((or_ln46_fu_820_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state42))) begin
        acmin_o_ap_vld = 1'b1;
    end else begin
        acmin_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        activity_ap_vld = 1'b1;
    end else begin
        activity_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln11_1_fu_484_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln15_fu_511_p2 == 1'd0)) begin
        ap_condition_pp1_exit_iter0_state6 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state6 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln28_1_fu_605_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state21 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state21 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln11_reg_846 == 1'd1))) begin
        ap_phi_mux_i_1_phi_fu_246_p4 = div_reg_838;
    end else begin
        ap_phi_mux_i_1_phi_fu_246_p4 = i_1_reg_242;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln28_1_reg_951 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        ap_phi_mux_i_3_phi_fu_278_p4 = add_ln28_reg_946;
    end else begin
        ap_phi_mux_i_3_phi_fu_278_p4 = i_3_reg_274;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln11_1_reg_865 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_i_phi_fu_210_p4 = add_ln11_reg_860;
    end else begin
        ap_phi_mux_i_phi_fu_210_p4 = i_reg_206;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln15_reg_895 == 1'd1) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        ap_phi_mux_meanhr1_phi_fu_266_p4 = grp_fu_310_p2;
    end else begin
        ap_phi_mux_meanhr1_phi_fu_266_p4 = meanhr1_reg_262;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | ((icmp_ln28_fu_591_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18)))) begin
        grp_fu_310_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state33) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln15_fu_511_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_00001)))) begin
        grp_fu_310_opcode = 2'd0;
    end else begin
        grp_fu_310_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        grp_fu_310_p0 = tmp_reg_976;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        grp_fu_310_p0 = 64'd4627730092099895296;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        grp_fu_310_p0 = grp_fu_310_p2;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        grp_fu_310_p0 = grp_fu_323_p2;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_fu_310_p0 = div2_reg_917;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_310_p0 = bitcast_ln16_reg_889;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_310_p0 = reg_388;
    end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        grp_fu_310_p0 = ap_phi_mux_meanhr1_phi_fu_266_p4;
    end else begin
        grp_fu_310_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        grp_fu_310_p1 = grp_fu_310_p2;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        grp_fu_310_p1 = div2_reg_917;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        grp_fu_310_p1 = grp_fu_333_p2;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_fu_310_p1 = 64'd13854198353698488320;
    end else if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state33))) begin
        grp_fu_310_p1 = grp_fu_323_p2;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_310_p1 = meanhr1_2_reg_904;
    end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        grp_fu_310_p1 = bitcast_ln16_reg_889;
    end else begin
        grp_fu_310_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        grp_fu_323_p0 = select_ln35_1_fu_674_p3;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_fu_323_p0 = select_ln24_reg_910;
    end else if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17))) begin
        grp_fu_323_p0 = grp_fu_310_p2;
    end else begin
        grp_fu_323_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        grp_fu_323_p1 = 64'd4636737291354636288;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_fu_323_p1 = 64'd4621819117588971520;
    end else if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state19))) begin
        grp_fu_323_p1 = grp_fu_310_p2;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_323_p1 = 64'd4602678819172646912;
    end else begin
        grp_fu_323_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_fu_340_p0 = empty_12_reg_297;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_340_p0 = meanhr0_0_lcssa_reg_229;
    end else begin
        grp_fu_340_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        grp_fu_351_opcode = 5'd2;
    end else if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state17))) begin
        grp_fu_351_opcode = 5'd4;
    end else begin
        grp_fu_351_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        grp_fu_351_p0 = select_ln41_fu_718_p3;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        grp_fu_351_p0 = div2_reg_917;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        grp_fu_351_p0 = reg_388;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_351_p0 = grp_fu_315_p2;
    end else begin
        grp_fu_351_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        grp_fu_351_p1 = bitcast_ln46_fu_732_p1;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        grp_fu_351_p1 = 64'd4627730092099895296;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        grp_fu_351_p1 = 64'd4636737291354636288;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_351_p1 = 64'd0;
    end else begin
        grp_fu_351_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fu_364_p0 = len;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_364_p0 = div_reg_838;
    end else begin
        grp_fu_364_p0 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln11_1_fu_484_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_494_in_valid = 1'b1;
    end else begin
        grp_fu_494_in_valid = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln28_1_fu_605_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        grp_fu_615_in_valid = 1'b1;
    end else begin
        grp_fu_615_in_valid = 1'b0;
    end
end

always @ (*) begin
    if (((or_ln46_fu_820_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state42))) begin
        hrmin_ap_vld = 1'b1;
    end else begin
        hrmin_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        meanhr_ap_vld = 1'b1;
    end else begin
        meanhr_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        stationarity_ap_vld = 1'b1;
    end else begin
        stationarity_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((or_ln46_fu_820_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state42))) begin
        stmin_ap_vld = 1'b1;
    end else begin
        stmin_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((or_ln46_fu_820_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state42))) begin
        tmin0_ap_vld = 1'b1;
    end else begin
        tmin0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((or_ln46_fu_820_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state42))) begin
        tmin1_ap_vld = 1'b1;
    end else begin
        tmin1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((or_ln46_fu_820_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state42))) begin
        tpmin_ap_vld = 1'b1;
    end else begin
        tpmin_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        tpower_ap_vld = 1'b1;
    end else begin
        tpower_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln11_fu_468_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln11_fu_468_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln11_1_fu_484_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln11_1_fu_484_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln15_fu_511_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln15_fu_511_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if (((icmp_ln28_fu_591_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((ap_enable_reg_pp2_iter1 == 1'b0) & (icmp_ln28_1_fu_605_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)) & ~((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter1 == 1'b0) & (icmp_ln28_1_fu_605_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)) | ((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign activity = bitcast_ln39_fu_726_p1;

assign add_ln11_fu_478_p2 = (ap_phi_mux_i_phi_fu_210_p4 + 32'd1);

assign add_ln15_fu_516_p2 = (i_2_reg_253 + 64'd1);

assign add_ln28_fu_599_p2 = (ap_phi_mux_i_3_phi_fu_278_p4 + 31'd1);

assign and_ln24_fu_558_p2 = (or_ln24_fu_552_p2 & grp_fu_351_p2);

assign and_ln35_fu_659_p2 = (or_ln35_fu_653_p2 & grp_fu_351_p2);

assign and_ln41_fu_713_p2 = (tmp_6_reg_982 & or_ln41_fu_707_p2);

assign and_ln46_1_fu_808_p2 = (grp_fu_351_p2 & and_ln46_fu_802_p2);

assign and_ln46_2_fu_814_p2 = (tmp_s_fu_359_p2 & or_ln46_2_fu_796_p2);

assign and_ln46_fu_802_p2 = (or_ln46_2_fu_796_p2 & or_ln46_1_fu_778_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state21_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign bitcast_ln12_fu_474_p1 = hr;

assign bitcast_ln16_fu_508_p1 = hr;

assign bitcast_ln21_fu_582_p1 = grp_fu_323_p2;

assign bitcast_ln22_fu_587_p1 = select_ln24_reg_910;

assign bitcast_ln24_fu_522_p1 = grp_fu_315_p2;

assign bitcast_ln25_fu_570_p1 = xor_ln25_fu_564_p2;

assign bitcast_ln33_fu_623_p1 = reg_388;

assign bitcast_ln39_fu_726_p1 = select_ln41_fu_718_p3;

assign bitcast_ln46_fu_732_p1 = acmin_i;

assign div_fu_450_p3 = ((tmp_10_fu_402_p3[0:0] == 1'b1) ? p_neg_t_fu_430_p2 : p_lshr_f_cast_fu_446_p1);

assign grp_fu_494_p2 = ((add_ln11_fu_478_p2 == div_reg_838) ? 1'b1 : 1'b0);

assign grp_fu_615_p2 = ((add_ln28_fu_599_p2 == trunc_ln29_reg_940) ? 1'b1 : 1'b0);

assign hrmin = bitcast_ln21_reg_924;

assign icmp_ln11_1_fu_484_p2 = ((ap_phi_mux_i_phi_fu_210_p4 == div_reg_838) ? 1'b1 : 1'b0);

assign icmp_ln11_fu_468_p2 = (($signed(tmp_11_fu_458_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln15_fu_511_p2 = (($signed(i_2_reg_253) < $signed(wide_trip_count21_reg_884)) ? 1'b1 : 1'b0);

assign icmp_ln24_1_fu_546_p2 = ((trunc_ln24_fu_536_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_540_p2 = ((tmp_1_fu_526_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln28_1_fu_605_p2 = ((ap_phi_mux_i_3_phi_fu_278_p4 == trunc_ln29_reg_940) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_591_p0 = len;

assign icmp_ln28_fu_591_p2 = (($signed(icmp_ln28_fu_591_p0) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln35_1_fu_647_p2 = ((trunc_ln35_fu_637_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_641_p2 = ((tmp_3_fu_627_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln41_1_fu_701_p2 = ((trunc_ln41_fu_692_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_695_p2 = ((tmp_5_fu_683_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln46_1_fu_772_p2 = ((trunc_ln46_fu_748_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln46_2_fu_784_p2 = ((tmp_8_fu_752_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln46_3_fu_790_p2 = ((trunc_ln46_1_fu_762_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_766_p2 = ((tmp_7_fu_738_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign meanhr = grp_fu_323_p2;

assign or_ln24_fu_552_p2 = (icmp_ln24_fu_540_p2 | icmp_ln24_1_fu_546_p2);

assign or_ln35_fu_653_p2 = (icmp_ln35_fu_641_p2 | icmp_ln35_1_fu_647_p2);

assign or_ln41_fu_707_p2 = (icmp_ln41_fu_695_p2 | icmp_ln41_1_fu_701_p2);

assign or_ln46_1_fu_778_p2 = (icmp_ln46_fu_766_p2 | icmp_ln46_1_fu_772_p2);

assign or_ln46_2_fu_796_p2 = (icmp_ln46_3_fu_790_p2 | icmp_ln46_2_fu_784_p2);

assign or_ln46_fu_820_p2 = (and_ln46_2_fu_814_p2 | and_ln46_1_fu_808_p2);

assign p_lshr_cast_fu_426_p1 = p_lshr_fu_416_p4;

assign p_lshr_f_cast_fu_446_p1 = p_lshr_f_fu_436_p4;

assign p_lshr_f_fu_436_p1 = len;

assign p_lshr_f_fu_436_p4 = {{p_lshr_f_fu_436_p1[31:1]}};

assign p_lshr_fu_416_p4 = {{p_neg_fu_410_p2[31:1]}};

assign p_neg_fu_410_p1 = len;

assign p_neg_fu_410_p2 = ($signed(32'd0) - $signed(p_neg_fu_410_p1));

assign p_neg_t_fu_430_p2 = (32'd0 - p_lshr_cast_fu_426_p1);

assign select_ln24_fu_574_p3 = ((and_ln24_fu_558_p2[0:0] == 1'b1) ? bitcast_ln25_fu_570_p1 : grp_fu_315_p2);

assign select_ln35_1_fu_674_p3 = ((and_ln35_fu_659_p2[0:0] == 1'b1) ? 64'd4636737291354636288 : reg_388);

assign select_ln41_fu_718_p3 = ((and_ln41_fu_713_p2[0:0] == 1'b1) ? grp_fu_310_p2 : tmp_reg_976);

assign sext_ln15_fu_501_p1 = $signed(ap_phi_mux_i_1_phi_fu_246_p4);

assign stationarity = select_ln24_reg_910;

assign stmin = bitcast_ln22_reg_931;

assign tmin0 = t;

assign tmin1 = t;

assign tmp_10_fu_402_p1 = len;

assign tmp_10_fu_402_p3 = tmp_10_fu_402_p1[32'd31];

assign tmp_11_fu_458_p1 = len;

assign tmp_11_fu_458_p4 = {{tmp_11_fu_458_p1[31:1]}};

assign tmp_1_fu_526_p4 = {{bitcast_ln24_fu_522_p1[62:52]}};

assign tmp_3_fu_627_p4 = {{bitcast_ln33_fu_623_p1[62:52]}};

assign tmp_5_fu_683_p4 = {{bitcast_ln21_reg_924[62:52]}};

assign tmp_7_fu_738_p4 = {{bitcast_ln39_fu_726_p1[62:52]}};

assign tmp_8_fu_752_p4 = {{acmin_i[62:52]}};

assign tmp_s_fu_359_p0 = acmin_i;

assign tpmin = select_ln35_1_reg_965;

assign tpower = ((and_ln35_fu_659_p2[0:0] == 1'b1) ? 64'd4636737291354636288 : bitcast_ln33_fu_623_p1);

assign trunc_ln24_fu_536_p1 = bitcast_ln24_fu_522_p1[51:0];

assign trunc_ln29_fu_596_p0 = len;

assign trunc_ln29_fu_596_p1 = trunc_ln29_fu_596_p0[30:0];

assign trunc_ln35_fu_637_p1 = bitcast_ln33_fu_623_p1[51:0];

assign trunc_ln41_fu_692_p1 = bitcast_ln21_reg_924[51:0];

assign trunc_ln46_1_fu_762_p1 = acmin_i[51:0];

assign trunc_ln46_fu_748_p1 = bitcast_ln39_fu_726_p1[51:0];

assign wide_trip_count21_fu_505_p0 = len;

assign wide_trip_count21_fu_505_p1 = wide_trip_count21_fu_505_p0;

assign xor_ln25_fu_564_p2 = (bitcast_ln24_fu_522_p1 ^ 64'd9223372036854775808);

endmodule //activity_kernel
