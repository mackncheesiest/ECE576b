# This script segment is generated automatically by AutoPilot

# Memory (RAM/ROM)  definition:
set ID 3
set hasByteEnable 0
set MemName rijndaelEncrypt_hls_Te0
set CoreName ap_simcore_mem
set PortList { 1 1 1 1 }
set DataWd 32
set AddrRange 256
set AddrWd 8
set impl_style auto
set TrueReset 0
set IsROM 1
set ROMData { "11000110011000110110001110100101" "11111000011111000111110010000100" "11101110011101110111011110011001" "11110110011110110111101110001101" "11111111111100101111001000001101" "11010110011010110110101110111101" "11011110011011110110111110110001" "10010001110001011100010101010100" "01100000001100000011000001010000" "00000010000000010000000100000011" "11001110011001110110011110101001" "01010110001010110010101101111101" "11100111111111101111111000011001" "10110101110101111101011101100010" "01001101101010111010101111100110" "11101100011101100111011010011010" "10001111110010101100101001000101" "00011111100000101000001010011101" "10001001110010011100100101000000" "11111010011111010111110110000111" "11101111111110101111101000010101" "10110010010110010101100111101011" "10001110010001110100011111001001" "11111011111100001111000000001011" "01000001101011011010110111101100" "10110011110101001101010001100111" "01011111101000101010001011111101" "01000101101011111010111111101010" "00100011100111001001110010111111" "01010011101001001010010011110111" "11100100011100100111001010010110" "10011011110000001100000001011011" "01110101101101111011011111000010" "11100001111111011111110100011100" "00111101100100111001001110101110" "01001100001001100010011001101010" "01101100001101100011011001011010" "01111110001111110011111101000001" "11110101111101111111011100000010" "10000011110011001100110001001111" "01101000001101000011010001011100" "01010001101001011010010111110100" "11010001111001011110010100110100" "11111001111100011111000100001000" "11100010011100010111000110010011" "10101011110110001101100001110011" "01100010001100010011000101010011" "00101010000101010001010100111111" "00001000000001000000010000001100" "10010101110001111100011101010010" "01000110001000110010001101100101" "10011101110000111100001101011110" "00110000000110000001100000101000" "00110111100101101001011010100001" "00001010000001010000010100001111" "00101111100110101001101010110101" "00001110000001110000011100001001" "00100100000100100001001000110110" "00011011100000001000000010011011" "11011111111000101110001000111101" "11001101111010111110101100100110" "01001110001001110010011101101001" "01111111101100101011001011001101" "11101010011101010111010110011111" "00010010000010010000100100011011" "00011101100000111000001110011110" "01011000001011000010110001110100" "00110100000110100001101000101110" "00110110000110110001101100101101" "11011100011011100110111010110010" "10110100010110100101101011101110" "01011011101000001010000011111011" "10100100010100100101001011110110" "01110110001110110011101101001101" "10110111110101101101011001100001" "01111101101100111011001111001110" "01010010001010010010100101111011" "11011101111000111110001100111110" "01011110001011110010111101110001" "00010011100001001000010010010111" "10100110010100110101001111110101" "10111001110100011101000101101000" "00000000000000000000000000000000" "11000001111011011110110100101100" "01000000001000000010000001100000" "11100011111111001111110000011111" "01111001101100011011000111001000" "10110110010110110101101111101101" "11010100011010100110101010111110" "10001101110010111100101101000110" "01100111101111101011111011011001" "01110010001110010011100101001011" "10010100010010100100101011011110" "10011000010011000100110011010100" "10110000010110000101100011101000" "10000101110011111100111101001010" "10111011110100001101000001101011" "11000101111011111110111100101010" "01001111101010101010101011100101" "11101101111110111111101100010110" "10000110010000110100001111000101" "10011010010011010100110111010111" "01100110001100110011001101010101" "00010001100001011000010110010100" "10001010010001010100010111001111" "11101001111110011111100100010000" "00000100000000100000001000000110" "11111110011111110111111110000001" "10100000010100000101000011110000" "01111000001111000011110001000100" "00100101100111111001111110111010" "01001011101010001010100011100011" "10100010010100010101000111110011" "01011101101000111010001111111110" "10000000010000000100000011000000" "00000101100011111000111110001010" "00111111100100101001001010101101" "00100001100111011001110110111100" "01110000001110000011100001001000" "11110001111101011111010100000100" "01100011101111001011110011011111" "01110111101101101011011011000001" "10101111110110101101101001110101" "01000010001000010010000101100011" "00100000000100000001000000110000" "11100101111111111111111100011010" "11111101111100111111001100001110" "10111111110100101101001001101101" "10000001110011011100110101001100" "00011000000011000000110000010100" "00100110000100110001001100110101" "11000011111011001110110000101111" "10111110010111110101111111100001" "00110101100101111001011110100010" "10001000010001000100010011001100" "00101110000101110001011100111001" "10010011110001001100010001010111" "01010101101001111010011111110010" "11111100011111100111111010000010" "01111010001111010011110101000111" "11001000011001000110010010101100" "10111010010111010101110111100111" "00110010000110010001100100101011" "11100110011100110111001110010101" "11000000011000000110000010100000" "00011001100000011000000110011000" "10011110010011110100111111010001" "10100011110111001101110001111111" "01000100001000100010001001100110" "01010100001010100010101001111110" "00111011100100001001000010101011" "00001011100010001000100010000011" "10001100010001100100011011001010" "11000111111011101110111000101001" "01101011101110001011100011010011" "00101000000101000001010000111100" "10100111110111101101111001111001" "10111100010111100101111011100010" "00010110000010110000101100011101" "10101101110110111101101101110110" "11011011111000001110000000111011" "01100100001100100011001001010110" "01110100001110100011101001001110" "00010100000010100000101000011110" "10010010010010010100100111011011" "00001100000001100000011000001010" "01001000001001000010010001101100" "10111000010111000101110011100100" "10011111110000101100001001011101" "10111101110100111101001101101110" "01000011101011001010110011101111" "11000100011000100110001010100110" "00111001100100011001000110101000" "00110001100101011001010110100100" "11010011111001001110010000110111" "11110010011110010111100110001011" "11010101111001111110011100110010" "10001011110010001100100001000011" "01101110001101110011011101011001" "11011010011011010110110110110111" "00000001100011011000110110001100" "10110001110101011101010101100100" "10011100010011100100111011010010" "01001001101010011010100111100000" "11011000011011000110110010110100" "10101100010101100101011011111010" "11110011111101001111010000000111" "11001111111010101110101000100101" "11001010011001010110010110101111" "11110100011110100111101010001110" "01000111101011101010111011101001" "00010000000010000000100000011000" "01101111101110101011101011010101" "11110000011110000111100010001000" "01001010001001010010010101101111" "01011100001011100010111001110010" "00111000000111000001110000100100" "01010111101001101010011011110001" "01110011101101001011010011000111" "10010111110001101100011001010001" "11001011111010001110100000100011" "10100001110111011101110101111100" "11101000011101000111010010011100" "00111110000111110001111100100001" "10010110010010110100101111011101" "01100001101111011011110111011100" "00001101100010111000101110000110" "00001111100010101000101010000101" "11100000011100000111000010010000" "01111100001111100011111001000010" "01110001101101011011010111000100" "11001100011001100110011010101010" "10010000010010000100100011011000" "00000110000000110000001100000101" "11110111111101101111011000000001" "00011100000011100000111000010010" "11000010011000010110000110100011" "01101010001101010011010101011111" "10101110010101110101011111111001" "01101001101110011011100111010000" "00010111100001101000011010010001" "10011001110000011100000101011000" "00111010000111010001110100100111" "00100111100111101001111010111001" "11011001111000011110000100111000" "11101011111110001111100000010011" "00101011100110001001100010110011" "00100010000100010001000100110011" "11010010011010010110100110111011" "10101001110110011101100101110000" "00000111100011101000111010001001" "00110011100101001001010010100111" "00101101100110111001101110110110" "00111100000111100001111000100010" "00010101100001111000011110010010" "11001001111010011110100100100000" "10000111110011101100111001001001" "10101010010101010101010111111111" "01010000001010000010100001111000" "10100101110111111101111101111010" "00000011100011001000110010001111" "01011001101000011010000111111000" "00001001100010011000100110000000" "00011010000011010000110100010111" "01100101101111111011111111011010" "11010111111001101110011000110001" "10000100010000100100001011000110" "11010000011010000110100010111000" "10000010010000010100000111000011" "00101001100110011001100110110000" "01011010001011010010110101110111" "00011110000011110000111100010001" "01111011101100001011000011001011" "10101000010101000101010011111100" "01101101101110111011101111010110" "00101100000101100001011000111010" }
set HasInitializer 1
set Initializer $ROMData
set NumOfStage 2
set MaxLatency -1
set DelayBudget 1.237
set ClkPeriod 2
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 4 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName ROM
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_ROM] == "::AESL_LIB_VIRTEX::xil_gen_ROM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_ROM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 4 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_ROM, check your platform lib"
  }
}


# clear list
if {${::AESL::PGuard_autoexp_gen}} {
    cg_default_interface_gen_dc_begin
    cg_default_interface_gen_bundle_begin
    AESL_LIB_XILADAPTER::native_axis_begin
}

set axilite_register_dict [dict create]
set port_BUS_A {
pt { 
	dir I
	width 8
	depth 16
	mode ap_memory
	offset 16
	offset_end 31
}
ct { 
	dir O
	width 8
	depth 16
	mode ap_memory
	offset 32
	offset_end 47
}
rk { 
	dir I
	width 32
	depth 44
	mode ap_memory
	offset 256
	offset_end 511
}
ap_start { }
ap_done { }
ap_ready { }
ap_idle { }
}
dict set axilite_register_dict BUS_A $port_BUS_A


# Native S_AXILite:
if {${::AESL::PGuard_simmodel_gen}} {
	if {[info proc ::AESL_LIB_XILADAPTER::s_axilite_gen] == "::AESL_LIB_XILADAPTER::s_axilite_gen"} {
		eval "::AESL_LIB_XILADAPTER::s_axilite_gen { \
			id 4 \
			corename rijndaelEncrypt_hls_BUS_A_axilite \
			name rijndaelEncrypt_hls_BUS_A_s_axi \
			ports {$port_BUS_A} \
			op interface \
			is_flushable 0 \ 
			is_datawidth64 0 \ 
		} "
	} else {
		puts "@W \[IMPL-110\] Cannot find AXI Lite interface model in the library. Ignored generation of AXI Lite  interface for 'BUS_A'"
	}
}

if {${::AESL::PGuard_rtl_comp_handler}} {
	::AP::rtl_comp_handler rijndaelEncrypt_hls_BUS_A_s_axi
}


# Adapter definition:
set PortName ap_clk
set DataWd 1 
if {${::AESL::PGuard_autoexp_gen}} {
if {[info proc cg_default_interface_gen_clock] == "cg_default_interface_gen_clock"} {
eval "cg_default_interface_gen_clock { \
    id -1 \
    name ${PortName} \
    reset_level 0 \
    sync_rst true \
    corename apif_ap_clk \
    data_wd ${DataWd} \
    op interface \
}"
} else {
puts "@W \[IMPL-113\] Cannot find bus interface model in the library. Ignored generation of bus interface for '${PortName}'"
}
}


# Adapter definition:
set PortName ap_rst_n
set DataWd 1 
if {${::AESL::PGuard_autoexp_gen}} {
if {[info proc cg_default_interface_gen_reset] == "cg_default_interface_gen_reset"} {
eval "cg_default_interface_gen_reset { \
    id -2 \
    name ${PortName} \
    reset_level 0 \
    sync_rst true \
    corename apif_ap_rst_n \
    data_wd ${DataWd} \
    op interface \
}"
} else {
puts "@W \[IMPL-114\] Cannot find bus interface model in the library. Ignored generation of bus interface for '${PortName}'"
}
}



# merge
if {${::AESL::PGuard_autoexp_gen}} {
    cg_default_interface_gen_dc_end
    cg_default_interface_gen_bundle_end
    AESL_LIB_XILADAPTER::native_axis_end
}


