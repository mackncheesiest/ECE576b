# This script segment is generated automatically by AutoPilot

# Memory (RAM/ROM)  definition:
set ID 3
set hasByteEnable 0
set MemName rijndaelDecrypt_hls_Td0
set CoreName ap_simcore_mem
set PortList { 1 1 1 1 }
set DataWd 32
set AddrRange 256
set AddrWd 8
set impl_style auto
set TrueReset 0
set IsROM 1
set ROMData { "01010001111101001010011101010000" "01111110010000010110010101010011" "00011010000101111010010011000011" "00111010001001110101111010010110" "00111011101010110110101111001011" "00011111100111010100010111110001" "10101100111110100101100010101011" "01001011111000110000001110010011" "00100000001100001111101001010101" "10101101011101100110110111110110" "10001000110011000111011010010001" "11110101000000100100110000100101" "01001111111001011101011111111100" "11000101001010101100101111010111" "00100110001101010100010010000000" "10110101011000101010001110001111" "11011110101100010101101001001001" "00100101101110100001101101100111" "01000101111010100000111010011000" "01011101111111101100000011100001" "11000011001011110111010100000010" "10000001010011001111000000010010" "10001101010001101001011110100011" "01101011110100111111100111000110" "00000011100011110101111111100111" "00010101100100101001110010010101" "10111111011011010111101011101011" "10010101010100100101100111011010" "11010100101111101000001100101101" "01011000011101000010000111010011" "01001001111000000110100100101001" "10001110110010011100100001000100" "01110101110000101000100101101010" "11110100100011100111100101111000" "10011001010110000011111001101011" "00100111101110010111000111011101" "10111110111000010100111110110110" "11110000100010001010110100010111" "11001001001000001010110001100110" "01111101110011100011101010110100" "01100011110111110100101000011000" "11100101000110100011000110000010" "10010111010100010011001101100000" "01100010010100110111111101000101" "10110001011001000111011111100000" "10111011011010111010111010000100" "11111110100000011010000000011100" "11111001000010000010101110010100" "01110000010010000110100001011000" "10001111010001011111110100011001" "10010100110111100110110010000111" "01010010011110111111100010110111" "10101011011100111101001100100011" "01110010010010110000001011100010" "11100011000111111000111101010111" "01100110010101011010101100101010" "10110010111010110010100000000111" "00101111101101011100001000000011" "10000110110001010111101110011010" "11010011001101110000100010100101" "00110000001010001000011111110010" "00100011101111111010010110110010" "00000010000000110110101010111010" "11101101000101101000001001011100" "10001010110011110001110000101011" "10100111011110011011010010010010" "11110011000001111111001011110000" "01001110011010011110001010100001" "01100101110110101111010011001101" "00000110000001011011111011010101" "11010001001101000110001000011111" "11000100101001101111111010001010" "00110100001011100101001110011101" "10100010111100110101010110100000" "00000101100010101110000100110010" "10100100111101101110101101110101" "00001011100000111110110000111001" "01000000011000001110111110101010" "01011110011100011001111100000110" "10111101011011100001000001010001" "00111110001000011000101011111001" "10010110110111010000011000111101" "11011101001111100000010110101110" "01001101111001101011110101000110" "10010001010101001000110110110101" "01110001110001000101110100000101" "00000100000001101101010001101111" "01100000010100000001010111111111" "00011001100110001111101100100100" "11010110101111011110100110010111" "10001001010000000100001111001100" "01100111110110011001111001110111" "10110000111010000100001010111101" "00000111100010011000101110001000" "11100111000110010101101100111000" "01111001110010001110111011011011" "10100001011111000000101001000111" "01111100010000100000111111101001" "11111000100001000001111011001001" "00000000000000000000000000000000" "00001001100000001000011010000011" "00110010001010111110110101001000" "00011110000100010111000010101100" "01101100010110100111001001001110" "11111101000011101111111111111011" "00001111100001010011100001010110" "00111101101011101101010100011110" "00110110001011010011100100100111" "00001010000011111101100101100100" "01101000010111001010011000100001" "10011011010110110101010011010001" "00100100001101100010111000111010" "00001100000010100110011110110001" "10010011010101111110011100001111" "10110100111011101001011011010010" "00011011100110111001000110011110" "10000000110000001100010101001111" "01100001110111000010000010100010" "01011010011101110100101101101001" "00011100000100100001101000010110" "11100010100100111011101000001010" "11000000101000000010101011100101" "00111100001000101110000001000011" "00010010000110110001011100011101" "00001110000010010000110100001011" "11110010100010111100011110101101" "00101101101101101010100010111001" "00010100000111101010100111001000" "01010111111100010001100110000101" "10101111011101010000011101001100" "11101110100110011101110110111011" "10100011011111110110000011111101" "11110111000000010010011010011111" "01011100011100101111010110111100" "01000100011001100011101111000101" "01011011111110110111111000110100" "10001011010000110010100101110110" "11001011001000111100011011011100" "10110110111011011111110001101000" "10111000111001001111000101100011" "11010111001100011101110011001010" "01000010011000111000010100010000" "00010011100101110010001001000000" "10000100110001100001000100100000" "10000101010010100010010001111101" "11010010101110110011110111111000" "10101110111110010011001000010001" "11000111001010011010000101101101" "00011101100111100010111101001011" "11011100101100100011000011110011" "00001101100001100101001011101100" "01110111110000011110001111010000" "00101011101100110001011001101100" "10101001011100001011100110011001" "00010001100101000100100011111010" "01000111111010010110010000100010" "10101000111111001000110011000100" "10100000111100000011111100011010" "01010110011111010010110011011000" "00100010001100111001000011101111" "10000111010010010100111011000111" "11011001001110001101000111000001" "10001100110010101010001011111110" "10011000110101000000101100110110" "10100110111101011000000111001111" "10100101011110101101111000101000" "11011010101101111000111000100110" "00111111101011011011111110100100" "00101100001110101001110111100100" "01010000011110001001001000001101" "01101010010111111100110010011011" "01010100011111100100011001100010" "11110110100011010001001111000010" "10010000110110001011100011101000" "00101110001110011111011101011110" "10000010110000111010111111110101" "10011111010111011000000010111110" "01101001110100001001001101111100" "01101111110101010010110110101001" "11001111001001010001001010110011" "11001000101011001001100100111011" "00010000000110000111110110100111" "11101000100111000110001101101110" "11011011001110111011101101111011" "11001101001001100111100000001001" "01101110010110010001100011110100" "11101100100110101011011100000001" "10000011010011111001101010101000" "11100110100101010110111001100101" "10101010111111111110011001111110" "00100001101111001100111100001000" "11101111000101011110100011100110" "10111010111001111001101111011001" "01001010011011110011011011001110" "11101010100111110000100111010100" "00101001101100000111110011010110" "00110001101001001011001010101111" "00101010001111110010001100110001" "11000110101001011001010000110000" "00110101101000100110011011000000" "01110100010011101011110000110111" "11111100100000101100101010100110" "11100000100100001101000010110000" "00110011101001111101100000010101" "11110001000001001001100001001010" "01000001111011001101101011110111" "01111111110011010101000000001110" "00010111100100011111011000101111" "01110110010011011101011010001101" "01000011111011111011000001001101" "11001100101010100100110101010100" "11100100100101100000010011011111" "10011110110100011011010111100011" "01001100011010101000100000011011" "11000001001011000001111110111000" "01000110011001010101000101111111" "10011101010111101110101000000100" "00000001100011000011010101011101" "11111010100001110111010001110011" "11111011000010110100000100101110" "10110011011001110001110101011010" "10010010110110111101001001010010" "11101001000100000101011000110011" "01101101110101100100011100010011" "10011010110101110110000110001100" "00110111101000010000110001111010" "01011001111110000001010010001110" "11101011000100110011110010001001" "11001110101010010010011111101110" "10110111011000011100100100110101" "11100001000111001110010111101101" "01111010010001111011000100111100" "10011100110100101101111101011001" "01010101111100100111001100111111" "00011000000101001100111001111001" "01110011110001110011011110111111" "01010011111101111100110111101010" "01011111111111011010101001011011" "11011111001111010110111100010100" "01111000010001001101101110000110" "11001010101011111111001110000001" "10111001011010001100010000111110" "00111000001001000011010000101100" "11000010101000110100000001011111" "00010110000111011100001101110010" "10111100111000100010010100001100" "00101000001111000100100110001011" "11111111000011011001010101000001" "00111001101010000000000101110001" "00001000000011001011001111011110" "11011000101101001110010010011100" "01100100010101101100000110010000" "01111011110010111000010001100001" "11010101001100101011011001110000" "01001000011011000101110001110100" "11010000101110000101011101000010" }
set HasInitializer 1
set Initializer $ROMData
set NumOfStage 2
set MaxLatency -1
set DelayBudget 1.237
set ClkPeriod 2
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 4 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName ROM
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_ROM] == "::AESL_LIB_VIRTEX::xil_gen_ROM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_ROM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 4 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_ROM, check your platform lib"
  }
}


# Memory (RAM/ROM)  definition:
set ID 4
set hasByteEnable 0
set MemName rijndaelDecrypt_hls_Td4s
set CoreName ap_simcore_mem
set PortList { 1 1 1 1 }
set DataWd 8
set AddrRange 256
set AddrWd 8
set impl_style auto
set TrueReset 0
set IsROM 1
set ROMData { "01010010" "00001001" "01101010" "11010101" "00110000" "00110110" "10100101" "00111000" "10111111" "01000000" "10100011" "10011110" "10000001" "11110011" "11010111" "11111011" "01111100" "11100011" "00111001" "10000010" "10011011" "00101111" "11111111" "10000111" "00110100" "10001110" "01000011" "01000100" "11000100" "11011110" "11101001" "11001011" "01010100" "01111011" "10010100" "00110010" "10100110" "11000010" "00100011" "00111101" "11101110" "01001100" "10010101" "00001011" "01000010" "11111010" "11000011" "01001110" "00001000" "00101110" "10100001" "01100110" "00101000" "11011001" "00100100" "10110010" "01110110" "01011011" "10100010" "01001001" "01101101" "10001011" "11010001" "00100101" "01110010" "11111000" "11110110" "01100100" "10000110" "01101000" "10011000" "00010110" "11010100" "10100100" "01011100" "11001100" "01011101" "01100101" "10110110" "10010010" "01101100" "01110000" "01001000" "01010000" "11111101" "11101101" "10111001" "11011010" "01011110" "00010101" "01000110" "01010111" "10100111" "10001101" "10011101" "10000100" "10010000" "11011000" "10101011" "00000000" "10001100" "10111100" "11010011" "00001010" "11110111" "11100100" "01011000" "00000101" "10111000" "10110011" "01000101" "00000110" "11010000" "00101100" "00011110" "10001111" "11001010" "00111111" "00001111" "00000010" "11000001" "10101111" "10111101" "00000011" "00000001" "00010011" "10001010" "01101011" "00111010" "10010001" "00010001" "01000001" "01001111" "01100111" "11011100" "11101010" "10010111" "11110010" "11001111" "11001110" "11110000" "10110100" "11100110" "01110011" "10010110" "10101100" "01110100" "00100010" "11100111" "10101101" "00110101" "10000101" "11100010" "11111001" "00110111" "11101000" "00011100" "01110101" "11011111" "01101110" "01000111" "11110001" "00011010" "01110001" "00011101" "00101001" "11000101" "10001001" "01101111" "10110111" "01100010" "00001110" "10101010" "00011000" "10111110" "00011011" "11111100" "01010110" "00111110" "01001011" "11000110" "11010010" "01111001" "00100000" "10011010" "11011011" "11000000" "11111110" "01111000" "11001101" "01011010" "11110100" "00011111" "11011101" "10101000" "00110011" "10001000" "00000111" "11000111" "00110001" "10110001" "00010010" "00010000" "01011001" "00100111" "10000000" "11101100" "01011111" "01100000" "01010001" "01111111" "10101001" "00011001" "10110101" "01001010" "00001101" "00101101" "11100101" "01111010" "10011111" "10010011" "11001001" "10011100" "11101111" "10100000" "11100000" "00111011" "01001101" "10101110" "00101010" "11110101" "10110000" "11001000" "11101011" "10111011" "00111100" "10000011" "01010011" "10011001" "01100001" "00010111" "00101011" "00000100" "01111110" "10111010" "01110111" "11010110" "00100110" "11100001" "01101001" "00010100" "01100011" "01010101" "00100001" "00001100" "01111101" }
set HasInitializer 1
set Initializer $ROMData
set NumOfStage 2
set MaxLatency -1
set DelayBudget 1.237
set ClkPeriod 2
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 4 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName ROM
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_ROM] == "::AESL_LIB_VIRTEX::xil_gen_ROM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_ROM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 4 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_ROM, check your platform lib"
  }
}


# clear list
if {${::AESL::PGuard_autoexp_gen}} {
    cg_default_interface_gen_dc_begin
    cg_default_interface_gen_bundle_begin
    AESL_LIB_XILADAPTER::native_axis_begin
}

set axilite_register_dict [dict create]
set port_BUS {
ct { 
	dir I
	width 8
	depth 16
	mode ap_memory
	offset 16
	offset_end 31
}
pt { 
	dir O
	width 8
	depth 16
	mode ap_memory
	offset 32
	offset_end 47
}
rk { 
	dir I
	width 32
	depth 44
	mode ap_memory
	offset 256
	offset_end 511
}
ap_start { }
ap_done { }
ap_ready { }
ap_idle { }
}
dict set axilite_register_dict BUS $port_BUS


# Native S_AXILite:
if {${::AESL::PGuard_simmodel_gen}} {
	if {[info proc ::AESL_LIB_XILADAPTER::s_axilite_gen] == "::AESL_LIB_XILADAPTER::s_axilite_gen"} {
		eval "::AESL_LIB_XILADAPTER::s_axilite_gen { \
			id 5 \
			corename rijndaelDecrypt_hls_BUS_axilite \
			name rijndaelDecrypt_hls_BUS_s_axi \
			ports {$port_BUS} \
			op interface \
			is_flushable 0 \ 
			is_datawidth64 0 \ 
		} "
	} else {
		puts "@W \[IMPL-110\] Cannot find AXI Lite interface model in the library. Ignored generation of AXI Lite  interface for 'BUS'"
	}
}

if {${::AESL::PGuard_rtl_comp_handler}} {
	::AP::rtl_comp_handler rijndaelDecrypt_hls_BUS_s_axi
}


# Adapter definition:
set PortName ap_clk
set DataWd 1 
if {${::AESL::PGuard_autoexp_gen}} {
if {[info proc cg_default_interface_gen_clock] == "cg_default_interface_gen_clock"} {
eval "cg_default_interface_gen_clock { \
    id -1 \
    name ${PortName} \
    reset_level 0 \
    sync_rst true \
    corename apif_ap_clk \
    data_wd ${DataWd} \
    op interface \
}"
} else {
puts "@W \[IMPL-113\] Cannot find bus interface model in the library. Ignored generation of bus interface for '${PortName}'"
}
}


# Adapter definition:
set PortName ap_rst_n
set DataWd 1 
if {${::AESL::PGuard_autoexp_gen}} {
if {[info proc cg_default_interface_gen_reset] == "cg_default_interface_gen_reset"} {
eval "cg_default_interface_gen_reset { \
    id -2 \
    name ${PortName} \
    reset_level 0 \
    sync_rst true \
    corename apif_ap_rst_n \
    data_wd ${DataWd} \
    op interface \
}"
} else {
puts "@W \[IMPL-114\] Cannot find bus interface model in the library. Ignored generation of bus interface for '${PortName}'"
}
}



# merge
if {${::AESL::PGuard_autoexp_gen}} {
    cg_default_interface_gen_dc_end
    cg_default_interface_gen_bundle_end
    AESL_LIB_XILADAPTER::native_axis_end
}


